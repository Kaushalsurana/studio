// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates practice questions and answer keys aligned with the generated content.
 *
 * - generateQuestions - A function that handles the question generation process.
 * - QuestionGenerationInput - The input type for the generateQuestions function.
 * - QuestionGenerationOutput - The return type for the generateQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const QuestionGenerationInputSchema = z.object({
  content: z.string().describe('The educational content to generate questions for.'),
  topic: z.string().describe('The topic of the content.'),
});
export type QuestionGenerationInput = z.infer<typeof QuestionGenerationInputSchema>;

const QuestionGenerationOutputSchema = z.object({
  questions: z.array(
    z.object({
      question: z.string().describe('The practice question.'),
      answer: z.string().describe('The answer to the question.'),
    })
  ).describe('A list of practice questions and their corresponding answers.'),
});
export type QuestionGenerationOutput = z.infer<typeof QuestionGenerationOutputSchema>;

export async function generateQuestions(input: QuestionGenerationInput): Promise<QuestionGenerationOutput> {
  return generateQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'questionGenerationPrompt',
  input: {schema: QuestionGenerationInputSchema},
  output: {schema: QuestionGenerationOutputSchema},
  prompt: `You are an expert educator specializing in creating practice questions for science textbooks.

  Based on the provided educational content, generate a set of practice questions and their corresponding answer keys.
  The questions should be aligned with the content and suitable for the target audience.

  Topic: {{{topic}}}
  Content: {{{content}}}

  Format the questions and answers as a JSON array of objects, where each object has a 'question' and an 'answer' field.
  `, 
});

const generateQuestionsFlow = ai.defineFlow(
  {
    name: 'generateQuestionsFlow',
    inputSchema: QuestionGenerationInputSchema,
    outputSchema: QuestionGenerationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
